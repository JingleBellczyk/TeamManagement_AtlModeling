module teamManagement2Report;

-- @path MMIn=/TeamManagementATL/metamodels/teamManagement.ecore
-- @path MMOut=/TeamManagementATL/metamodels/projectReport.ecore

create OUT : MMOut from IN : MMIn;

-- Główna reguła przekształcająca projekt
rule ReportRoot {
    from
        p : MMIn!Project
    to
        r : MMOut!Report (
            projectTitle <- p.title,
            summary <- p.description,
            totalPeople <- p.people->size(),
            totalBudget <- p.budget,
            tasks <- p.tasks->collect(t | thisModule.Task2ReportTask(t)),
            milestones <- p.milestones->collect(m | thisModule.Milestone2ReportMilestone(m)),
            teams <- p.teams->collect(team | thisModule.Team2ReportTeam(team))
        )
}

-- Lazy rule: Task → ReportTask
lazy rule Task2ReportTask {
    from
        t : MMIn!Task
    to
        rt : MMOut!ReportTask (
            title <- t.title,
            status <- t.status,
            assignedTo <- if not t.assignee.oclIsUndefined() then t.assignee.name else '' endif,
            estimatedHours <- t.estimatedHours,
            actualHours <- t.actualHours
        )
}

-- Lazy rule: Milestone → ReportMilestone
lazy rule Milestone2ReportMilestone {
    from
        m : MMIn!Milestone
    to
        rm : MMOut!ReportMilestone (
            name <- m.name,
            dueDate <- m.dueDate, -- Jeśli nadal chcesz datę, upewnij się że Ecore ją wspiera (typ EDate)
            status <- m.status
        )
}

-- Lazy rule: Team → ReportTeam
lazy rule Team2ReportTeam {
    from
        team : MMIn!Team
    to
        rt : MMOut!ReportTeam (
            name <- team.name,
            membersCount <- team.members->size(),
            leader <- if not team.leader.oclIsUndefined() then team.leader.name else '' endif
        )
}


